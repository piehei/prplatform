"""
WSGI config for prplatform project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os
import sys


# this is an example file which shows you how to load environment variables
# in an apache mod_wsgi environment

os.environ['DJANGO_SETTINGS_MODULE'] = 'config.settings.production'
os.environ['DJANGO_SECRET_KEY'] = ''
os.environ['DJANGO_ACCOUNT_ALLOW_REGISTRATION'] = "True"

os.environ['DATABASE_URL'] = ''

os.environ['DJANGO_AWS_ACCESS_KEY_ID'] = ""
os.environ['DJANGO_AWS_SECRET_ACCESS_KEY'] = ""
os.environ['DJANGO_AWS_STORAGE_BUCKET_NAME'] = ""

os.environ['DJANGO_ADMIN_URL'] = r''
os.environ['DJANGO_ALLOWED_HOSTS'] = ''

os.environ['MAILGUN_API_KEY'] = ""
os.environ['DJANGO_SERVER_MAIL'] = ""
os.environ['MAILGUN_DOMAIN'] = ""

os.environ['DJANGO_SENTRY_DSN'] = ""

os.environ['REDIS_URL'] = ""

from django.core.wsgi import get_wsgi_application

# This allows easy placement of apps within the interior
# prplatform directory.
app_path = os.path.abspath(os.path.join(
    os.path.dirname(os.path.abspath(__file__)), os.pardir))
sys.path.append(os.path.join(app_path, 'prplatform'))

if os.environ.get('DJANGO_SETTINGS_MODULE') == 'config.settings.production':
    from raven.contrib.django.raven_compat.middleware.wsgi import Sentry

# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks
# if running multiple sites in the same mod_wsgi process. To fix this, use
# mod_wsgi daemon mode with each site in its own daemon process, or use
# os.environ["DJANGO_SETTINGS_MODULE"] = "config.settings.production"
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.production")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
application = get_wsgi_application()
if os.environ.get('DJANGO_SETTINGS_MODULE') == 'config.settings.production':

# Apply WSGI middleware here.
    application = Sentry(application)
